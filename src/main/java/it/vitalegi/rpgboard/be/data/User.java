package it.vitalegi.rpgboard.be.data;

import io.vertx.codegen.annotations.DataObject;
import io.vertx.codegen.format.SnakeCase;
import io.vertx.core.json.JsonObject;
import io.vertx.sqlclient.templates.annotations.Column;
import io.vertx.sqlclient.templates.annotations.RowMapped;
import it.vitalegi.rpgboard.be.repository.querybuilder.pg.Table;
import it.vitalegi.rpgboard.be.repository.querybuilder.pg.TableFactory;

import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

@DataObject(generateConverter = true)
@RowMapped(formatter = SnakeCase.class)
public class User {
  public static final String USER_ID = "user_id";
  public static final String USERNAME = "username";
  public static final String EXTERNAL_USER_ID = "external_user_id";
  public static final String CREATE_DATE = "create_date";
  public static final String LAST_UPDATE_DATE = "last_update";

  public static final Table BUILDER =
      TableFactory.init()
          .tableName("RPG_User")
          .primaryKey(USER_ID)
          .autoGenerated(USER_ID)
          .fields(USER_ID, USERNAME, EXTERNAL_USER_ID, CREATE_DATE, LAST_UPDATE_DATE)
          .build();

  @Column(name = EXTERNAL_USER_ID)
  String externalUserId;

  @Column(name = USER_ID)
  UUID userId;

  @Column(name = CREATE_DATE)
  OffsetDateTime createDate;

  @Column(name = LAST_UPDATE_DATE)
  OffsetDateTime lastUpdate;

  @Column(name = USERNAME)
  String name;

  public static Map<String, Object> map(
      UUID userId,
      String name,
      String externalUserId,
      OffsetDateTime createDate,
      OffsetDateTime lastUpdate) {

    Map<String, Object> map = new HashMap<>();
    map.put(USER_ID, userId);
    map.put(USERNAME, name);
    map.put(EXTERNAL_USER_ID, externalUserId);
    map.put(CREATE_DATE, createDate);
    map.put(LAST_UPDATE_DATE, lastUpdate);
    return map;
  }

  public static Map<String, Object> map(User entry) {
    return map(
        entry.getUserId(),
        entry.getName(),
        entry.getExternalUserId(),
        entry.getCreateDate(),
        entry.getLastUpdate());
  }

  public static Map<String, Object> mapPK(UUID userId) {
    Map<String, Object> map = new HashMap<>();
    map.put(USER_ID, userId);
    return map;
  }

  public JsonObject toJson() {
    JsonObject json = new JsonObject();
    UserConverter.toJson(this, json);
    return json;
  }

  public String getExternalUserId() {
    return externalUserId;
  }

  public void setExternalUserId(String externalUserId) {
    this.externalUserId = externalUserId;
  }

  public UUID getUserId() {
    return userId;
  }

  public void setUserId(UUID userId) {
    this.userId = userId;
  }

  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }

  public OffsetDateTime getLastUpdate() {
    return lastUpdate;
  }

  public void setLastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  @Override
  public String toString() {
    return "User{"
        + "externalUserId='"
        + externalUserId
        + '\''
        + ", userId="
        + userId
        + ", createDate="
        + createDate
        + ", lastUpdate="
        + lastUpdate
        + ", name='"
        + name
        + '\''
        + '}';
  }
}
