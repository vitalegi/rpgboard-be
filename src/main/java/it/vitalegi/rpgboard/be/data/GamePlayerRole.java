package it.vitalegi.rpgboard.be.data;

import io.vertx.codegen.annotations.DataObject;
import io.vertx.codegen.format.SnakeCase;
import io.vertx.core.json.JsonObject;
import io.vertx.sqlclient.templates.annotations.Column;
import io.vertx.sqlclient.templates.annotations.RowMapped;
import it.vitalegi.rpgboard.be.repository.querybuilder.pg.Table;
import it.vitalegi.rpgboard.be.repository.querybuilder.pg.TableFactory;

import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

@DataObject(generateConverter = true)
@RowMapped(formatter = SnakeCase.class)
public class GamePlayerRole {
  public static final String ENTRY_ID = "entry_id";
  public static final String GAME_ID = "game_id";
  public static final String USER_ID = "user_id";
  public static final String USER_ROLE = "user_role";
  public static final String CREATE_DATE = "create_date";
  public static final String LAST_UPDATE_DATE = "last_update";
  public static final Table BUILDER =
      TableFactory.init()
          .tableName("RPG_GamePlayerRole")
          .primaryKey(ENTRY_ID)
          .autoGenerated(ENTRY_ID)
          .fields(ENTRY_ID, GAME_ID, USER_ID, USER_ROLE, CREATE_DATE, LAST_UPDATE_DATE)
          .build();

  @Column(name = ENTRY_ID)
  Long entryId;

  @Column(name = GAME_ID)
  UUID gameId;

  @Column(name = USER_ID)
  UUID userId;

  @Column(name = USER_ROLE)
  String role;

  @Column(name = CREATE_DATE)
  OffsetDateTime createDate;

  @Column(name = LAST_UPDATE_DATE)
  OffsetDateTime lastUpdate;

  public static Map<String, Object> map(
      Long entryId,
      UUID gameId,
      UUID userId,
      String userRole,
      OffsetDateTime createDate,
      OffsetDateTime lastUpdate) {
    Map<String, Object> map = new HashMap<>();
    map.put(ENTRY_ID, entryId);
    map.put(GAME_ID, gameId);
    map.put(USER_ID, userId);
    map.put(USER_ROLE, userRole);
    map.put(CREATE_DATE, createDate);
    map.put(LAST_UPDATE_DATE, lastUpdate);
    return map;
  }

  public static Map<String, Object> map(GamePlayerRole entry) {
    return map(
        entry.getEntryId(),
        entry.getGameId(),
        entry.getUserId(),
        entry.getRole(),
        entry.getCreateDate(),
        entry.getLastUpdate());
  }

  public static Map<String, Object> mapPK(UUID entryId) {
    Map<String, Object> map = new HashMap<>();
    map.put(ENTRY_ID, entryId);
    return map;
  }

  @Override
  public String toString() {
    return "GamePlayerRole{"
        + "entryId="
        + entryId
        + ", gameId="
        + gameId
        + ", userId="
        + userId
        + ", role='"
        + role
        + '\''
        + ", createDate="
        + createDate
        + ", lastUpdate="
        + lastUpdate
        + '}';
  }

  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }

  public OffsetDateTime getLastUpdate() {
    return lastUpdate;
  }

  public void setLastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
  }

  public JsonObject toJson() {
    JsonObject json = new JsonObject();
    GamePlayerRoleConverter.toJson(this, json);
    return json;
  }

  public Long getEntryId() {
    return entryId;
  }

  public void setEntryId(Long entryId) {
    this.entryId = entryId;
  }

  public UUID getGameId() {
    return gameId;
  }

  public void setGameId(UUID gameId) {
    this.gameId = gameId;
  }

  public UUID getUserId() {
    return userId;
  }

  public void setUserId(UUID userId) {
    this.userId = userId;
  }

  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }
}
