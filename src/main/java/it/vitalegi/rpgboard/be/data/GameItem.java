package it.vitalegi.rpgboard.be.data;

import io.vertx.codegen.annotations.DataObject;
import io.vertx.codegen.format.SnakeCase;
import io.vertx.core.json.JsonObject;
import io.vertx.sqlclient.templates.annotations.Column;
import io.vertx.sqlclient.templates.annotations.RowMapped;
import it.vitalegi.rpgboard.be.repository.querybuilder.pg.Table;
import it.vitalegi.rpgboard.be.repository.querybuilder.pg.TableFactory;

import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

@DataObject(generateConverter = true)
@RowMapped(formatter = SnakeCase.class)
public class GameItem {
  public static final String ITEM_ID = "item_id";
  public static final String GAME_ID = "game_id";
  public static final String OWNER_ID = "owner_id";
  public static final String CONTENT = "content";
  public static final String TYPE = "type";
  public static final String CREATE_DATE = "create_date";
  public static final String LAST_UPDATE_DATE = "last_update";
  public static final Table BUILDER =
      TableFactory.init()
          .tableName("RPG_GameItem")
          .primaryKey(ITEM_ID)
          .autoGenerated(ITEM_ID)
          .fields(ITEM_ID, GAME_ID, OWNER_ID, CONTENT, TYPE, CREATE_DATE, LAST_UPDATE_DATE)
          .build();

  @Column(name = ITEM_ID)
  UUID itemId;

  @Column(name = GAME_ID)
  UUID gameId;

  @Column(name = OWNER_ID)
  UUID ownerId;

  @Column(name = TYPE)
  String type;

  @Column(name = CONTENT)
  JsonObject content;

  @Column(name = CREATE_DATE)
  OffsetDateTime createDate;

  @Column(name = LAST_UPDATE_DATE)
  OffsetDateTime lastUpdate;

  public static Map<String, Object> map(
      UUID itemId,
      UUID gameId,
      UUID ownerId,
      JsonObject content,
      String type,
      OffsetDateTime createDate,
      OffsetDateTime lastUpdate) {
    Map<String, Object> map = new HashMap<>();
    map.put(ITEM_ID, itemId);
    map.put(GAME_ID, gameId);
    map.put(OWNER_ID, ownerId);
    map.put(CONTENT, content);
    map.put(TYPE, type);
    map.put(CREATE_DATE, createDate);
    map.put(LAST_UPDATE_DATE, lastUpdate);

    return map;
  }

  public static Map<String, Object> map(GameItem entry) {
    return map(
        entry.getItemId(),
        entry.getGameId(),
        entry.getOwnerId(),
        entry.getContent(),
        entry.getType(),
        entry.getCreateDate(),
        entry.getLastUpdate());
  }

  public static Map<String, Object> mapPK(UUID itemId) {
    Map<String, Object> map = new HashMap<>();
    map.put(ITEM_ID, itemId);
    return map;
  }

  public JsonObject toJson() {
    JsonObject json = new JsonObject();
    GameItemConverter.toJson(this, json);
    return json;
  }

  @Override
  public String toString() {
    return "GameItem{"
        + "itemId="
        + itemId
        + ", gameId="
        + gameId
        + ", ownerId="
        + ownerId
        + ", type='"
        + type
        + '\''
        + ", content="
        + content
        + ", createDate="
        + createDate
        + ", lastUpdate="
        + lastUpdate
        + '}';
  }

  public UUID getItemId() {
    return itemId;
  }

  public void setItemId(UUID itemId) {
    this.itemId = itemId;
  }

  public UUID getGameId() {
    return gameId;
  }

  public void setGameId(UUID gameId) {
    this.gameId = gameId;
  }

  public UUID getOwnerId() {
    return ownerId;
  }

  public void setOwnerId(UUID ownerId) {
    this.ownerId = ownerId;
  }

  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public JsonObject getContent() {
    return content;
  }

  public void setContent(JsonObject content) {
    this.content = content;
  }

  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }

  public OffsetDateTime getLastUpdate() {
    return lastUpdate;
  }

  public void setLastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
  }
}
