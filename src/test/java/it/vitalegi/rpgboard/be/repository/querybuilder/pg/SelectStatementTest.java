package it.vitalegi.rpgboard.be.repository.querybuilder.pg;

import io.vertx.junit5.VertxExtension;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.assertEquals;

@ExtendWith(VertxExtension.class)
public class SelectStatementTest {
  Logger log = LoggerFactory.getLogger(this.getClass());

  PreparedStatementFactory factory1 =
      PreparedStatementFactory.init()
          .tableName("table1")
          .primaryKey("pk1")
          .primaryKey("pk2")
          .fields("pk1", "pk2", "field1", "field2")
          .autoGenerated("pk1");

  PreparedStatementFactory factory2 =
      PreparedStatementFactory.init()
          .tableName("table2")
          .primaryKey("pk3")
          .primaryKey("pk4")
          .fields("pk3", "pk4", "field3", "field4")
          .autoGenerated("pk3");

  @Test
  void oneTableSomeFields() {
    assertEquals(
        "SELECT t1.pk2, t1.field1, t1.field2 FROM table1 as t1;",
        factory1.select().values().allExcept("pk1").build());
    assertEquals(
        "SELECT t1.pk2, t1.field1, t1.field2 FROM table1 as t1;",
        factory1.select().values().exact(Arrays.asList("pk2", "field1", "field2")).build());
  }

  @Test
  void oneTableNoPlaceholder() {
    assertEquals(
        "SELECT t1.pk1, t1.pk2, t1.field1, t1.field2 FROM table1 as t1;",
        factory1.select().build());
  }

  @Test
  void oneTableOnePlaceholder() {
    assertEquals(
        "SELECT t1.pk1, t1.pk2, t1.field1, t1.field2 FROM table1 as t1 WHERE t1.pk1=#{pk1};",
        factory1.select().where().isEqualsToPlaceholder("pk1").end().build());
  }

  @Test
  void oneTableTwoPlaceholder() {
    assertEquals(
        "SELECT t1.pk1, t1.pk2, t1.field1, t1.field2 FROM table1 as t1 WHERE t1.pk1=#{pk1} AND t1.pk2=#{pk2};",
        factory1.select().where().areEqualToPlaceholder(Arrays.asList("pk1", "pk2")).end().build());
  }

  @Test
  void twoTableJoin() {

    SelectStatement t1 = factory1.select("t1");
    SelectStatement t2 = factory2.select("t2");
    t1.join(new JoinStatement(t1, t2).addEquals("pk1", "pk3"));

    assertEquals(
        "SELECT t1.pk1, t1.pk2, t1.field1, t1.field2, t2.pk3, t2.pk4, t2.field3, t2.field4 FROM table1 as t1 JOIN table2 as t2 ON t1.pk1=t2.pk3;",
        t1.build());
  }

  @Test
  void threeTableJoin() {

    SelectStatement t1 =
        factory1
            .select("t1")
            .values()
            .exact(Arrays.asList("pk1", "pk2"))
            .where()
            .isEqualsToPlaceholder("pk1")
            .end();
    SelectStatement t2 = factory2.select("t2").values().allExcept("field3");
    SelectStatement t3 = factory2.select("t3").values().allExcept("field4").where().allEqualToPlaceholder().end();
    t1.join(new JoinStatement(t1, t2).addEquals("pk1", "pk3"));
    t1.join(new JoinStatement(t2, t3).addEquals("pk3", "pk3").addEquals("pk3", "pk4"));

    assertEquals(
            "SELECT t1.pk1, t1.pk2, t2.pk3, t2.pk4, t2.field4, t3.pk3, t3.pk4, t3.field3 " +
                    "FROM table1 as t1 " +
                    "JOIN table2 as t2 ON t1.pk1=t2.pk3 " +
                    "JOIN table2 as t3 ON t2.pk3=t3.pk3 AND t2.pk3=t3.pk4 " +
                    "WHERE t1.pk1=#{pk1} AND t3.pk3=#{pk3} AND t3.pk4=#{pk4} AND t3.field3=#{field3} AND t3.field4=#{field4};",
        t1.build());
  }
}
