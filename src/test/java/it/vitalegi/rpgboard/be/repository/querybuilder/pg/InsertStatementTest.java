package it.vitalegi.rpgboard.be.repository.querybuilder.pg;

import io.vertx.junit5.VertxExtension;
import it.vitalegi.rpgboard.be.repository.querybuilder.pg.fields.FieldsPicker;
import it.vitalegi.rpgboard.be.repository.querybuilder.pg.insert.InsertValuesClause;
import it.vitalegi.rpgboard.be.repository.querybuilder.pg.returning.ReturningClause;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.assertEquals;

@ExtendWith(VertxExtension.class)
public class InsertStatementTest {
  Logger log = LoggerFactory.getLogger(this.getClass());

  Table table1 =
      TableFactory.init()
          .tableName("table1")
          .primaryKey("pk1")
          .primaryKey("pk2")
          .fields("pk1", "pk2", "field1", "field2")
          .autoGenerated("pk1")
          .build();

  @Test
  void oneTableSomeFields() {
    assertEquals(
        "INSERT INTO table1(pk2, field1, field2) VALUES (#{pk2}, #{field1}, #{field2}) RETURNING pk1, pk2, field1, field2;",
        InsertFactory.init(table1).values(new InsertValuesClause().allExcept("pk1")).build());

    assertEquals(
        "INSERT INTO table1(pk2, field1, field2) VALUES (#{pk2}, #{field1}, #{field2}) RETURNING pk1, field1;",
        InsertFactory.init(table1)
            .values(new InsertValuesClause().allExcept("pk1"))
            .returning(new ReturningClause(FieldsPicker.exact(Arrays.asList("pk1", "field1"))))
            .build());
  }

  @Test
  void oneTableNoPlaceholder() {
    assertEquals(
        "INSERT INTO table1(pk1, pk2, field1, field2) VALUES (#{pk1}, #{pk2}, #{field1}, #{field2}) RETURNING pk1, pk2, field1, field2;",
        InsertFactory.init(table1).build());
  }
}
